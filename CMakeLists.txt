cmake_minimum_required(VERSION 3.15)
project(KujoGFX)

# Require C++17 (and position independent code)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
endif()

if (WIN32)
    message(STATUS "Operating system is Windows.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	message(STATUS "Compiler is MinGW.")
	set(COMPILE_OPTIONS "-Wall")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL MSVC)
	message(WARNING "MSVC support is HIGHLY experimental, and may not even compile correctly, so be EXTREMELY careful here!")
	message(STATUS "Compiler is MSVC.")
	set(COMPILE_OPTIONS "/W4")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
	message(WARNING "Clang support on Windows is HIGHLY experimental, and may not even compile correctly, so be EXTREMELY careful here!")
	message(STATUS "Compiler is Clang.")
	set(COMPILE_OPTIONS "-Wall")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
elseif(UNIX AND NOT APPLE)
    message(WARNING "Linux support is HIGHLY experimental, and may not even compile correctly, so be EXTREMELY careful here!")
    message(STATUS "Operating system is Linux.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	message(STATUS "Compiler is GCC.")
	set(COMPILE_OPTIONS "-Wall")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
	message(STATUS "Compiler is Clang.")
	set(COMPILE_OPTIONS "-Wall")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
elseif(APPLE)
    message(WARNING "MacOS support is HIGHLY experimental, and may not even compile correctly, so be EXTREMELY careful here!")
    if (CMAKE_CXX_COMPILER_ID STREQUAL AppleClang)
	message(STATUS "Compiler is AppleClang.")
	set(COMPILE_OPTIONS "-Wall")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
else()
    message(SEND_ERROR "Operating system not supported.")
    return()
endif()

set(KUJOGFX_HEADERS
	kujogfx.h)

add_library(kujogfx INTERFACE kujogfx.h)
target_include_directories(kujogfx INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})

if (WIN32)
    target_link_libraries(kujogfx INTERFACE ntdll.lib d3d11.lib d3dcompiler.lib opengl32.lib)
endif()

find_package(OpenGL REQUIRED)
target_link_libraries(kujogfx INTERFACE OpenGL::GL)

find_package(GLEW REQUIRED)
target_include_directories(kujogfx INTERFACE ${GLEW_INCLUDE_DIRS})
target_link_libraries(kujogfx INTERFACE ${GLEW_LIBRARIES})

find_package(Vulkan REQUIRED)
target_link_libraries(kujogfx INTERFACE Vulkan::Vulkan VulkanLayerSettings VulkanSafeStruct)

add_subdirectory(external/glslang)
target_link_libraries(kujogfx INTERFACE glslang)

add_subdirectory(external/SPIRV-Headers)
add_subdirectory(external/SPIRV-Tools)
add_subdirectory(external/SPIRV-Cross)
target_link_libraries(kujogfx INTERFACE spirv-cross-c-shared)

add_subdirectory(examples/01-clear)
add_subdirectory(examples/02-triangle)
add_subdirectory(spirv_test)